#!markdown

Demo 1

#!csharp

#r "nuget:Microsoft.ML"

#!csharp

using System;
using System.IO;
using Microsoft.ML;
using Microsoft.ML.Data;

#!csharp

public class HouseData {
    public float Size { get; set; }
    public float Price { get; set; }
}

public class Prediction {
    [ColumnName("Score")]
    public float Price { get; set; }
}

#!csharp

MLContext mlContext = new MLContext();

#!csharp

HouseData[] houseData = {
    new HouseData() { Size = 1.1F, Price = 1.2F},
    new HouseData() { Size = 1.9F, Price = 1.2F},
    new HouseData() { Size = 2.8F, Price = 3.0F},
    new HouseData() { Size = 3.4F, Price = 3.7F},
};
IDataView trainData = mlContext.Data.LoadFromEnumerable(houseData);

#!csharp

var pipeline = mlContext.Transforms.Concatenate("Features", new[] { "Size" })
                .Append(mlContext.Regression.Trainers.Sdca(labelColumnName: "Price", maximumNumberOfIterations: 100));

#!csharp

var model = pipeline.Fit(trainData);

#!csharp

var size = new HouseData() {Size = 2.5F};
var price = mlContext.Model.CreatePredictionEngine<HouseData, Prediction>(model).Predict(size);

#!csharp

Console.WriteLine($"O Preço previsto para esse tamanho é: {size.Size*1000} Metros quadrados = {price.Price*100:C}K")

#!markdown

Avaliação do Modelo

#!csharp

HouseData[] testHouseData = {
    new HouseData() { Size = 1.1F, Price = 0.98F},
    new HouseData() { Size = 1.9F, Price = 2.1F},
    new HouseData() { Size = 2.8F, Price = 2.9F},
    new HouseData() { Size = 3.4F, Price = 3.6F},
};

var testHouseDataView = mlContext.Data.LoadFromEnumerable(testHouseData);
var testPriceDataView = model.Transform(testHouseDataView);

var metrics = mlContext.Regression.Evaluate(testPriceDataView, labelColumnName: "Price");

Console.WriteLine($"R^2: {metrics.RSquared}");
Console.WriteLine($"RMS error: {metrics.RootMeanSquaredError}");

#!csharp

private static string modelPath = @".HouseModel.zip";

mlContext.Model.Save(model, trainData.Schema, modelPath);
